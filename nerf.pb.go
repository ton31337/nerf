// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nerf.proto

/*
Package nerf is a generated protocol buffer package.

It is generated from these files:
	nerf.proto

It has these top-level messages:
	PingRequest
	PingResponse
	Request
	Response
	ApiResponse
	Notify
*/
package nerf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PingRequest struct {
	Data             *int64  `protobuf:"varint,1,req,name=data" json:"data,omitempty"`
	Login            *string `protobuf:"bytes,2,req,name=login" json:"login,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PingRequest) GetData() int64 {
	if m != nil && m.Data != nil {
		return *m.Data
	}
	return 0
}

func (m *PingRequest) GetLogin() string {
	if m != nil && m.Login != nil {
		return *m.Login
	}
	return ""
}

type PingResponse struct {
	Data             *int64 `protobuf:"varint,1,req,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PingResponse) GetData() int64 {
	if m != nil && m.Data != nil {
		return *m.Data
	}
	return 0
}

type Request struct {
	Login            *string `protobuf:"bytes,1,req,name=login" json:"login,omitempty"`
	Token            *string `protobuf:"bytes,2,req,name=token" json:"token,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Request) GetLogin() string {
	if m != nil && m.Login != nil {
		return *m.Login
	}
	return ""
}

func (m *Request) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

type Response struct {
	Config           *string  `protobuf:"bytes,1,req,name=config" json:"config,omitempty"`
	ClientIP         *string  `protobuf:"bytes,2,req,name=clientIP" json:"clientIP,omitempty"`
	Teams            []string `protobuf:"bytes,3,rep,name=teams" json:"teams,omitempty"`
	LightHouseIP     *string  `protobuf:"bytes,4,req,name=lightHouseIP" json:"lightHouseIP,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Response) GetConfig() string {
	if m != nil && m.Config != nil {
		return *m.Config
	}
	return ""
}

func (m *Response) GetClientIP() string {
	if m != nil && m.ClientIP != nil {
		return *m.ClientIP
	}
	return ""
}

func (m *Response) GetTeams() []string {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *Response) GetLightHouseIP() string {
	if m != nil && m.LightHouseIP != nil {
		return *m.LightHouseIP
	}
	return ""
}

type ApiResponse struct {
	ClientIP         *string `protobuf:"bytes,1,req,name=clientIP" json:"clientIP,omitempty"`
	RemoteIP         *string `protobuf:"bytes,2,req,name=remoteIP" json:"remoteIP,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ApiResponse) Reset()                    { *m = ApiResponse{} }
func (m *ApiResponse) String() string            { return proto.CompactTextString(m) }
func (*ApiResponse) ProtoMessage()               {}
func (*ApiResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ApiResponse) GetClientIP() string {
	if m != nil && m.ClientIP != nil {
		return *m.ClientIP
	}
	return ""
}

func (m *ApiResponse) GetRemoteIP() string {
	if m != nil && m.RemoteIP != nil {
		return *m.RemoteIP
	}
	return ""
}

type Notify struct {
	Login            *string `protobuf:"bytes,1,req,name=login" json:"login,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Notify) Reset()                    { *m = Notify{} }
func (m *Notify) String() string            { return proto.CompactTextString(m) }
func (*Notify) ProtoMessage()               {}
func (*Notify) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Notify) GetLogin() string {
	if m != nil && m.Login != nil {
		return *m.Login
	}
	return ""
}

func init() {
	proto.RegisterType((*PingRequest)(nil), "nerf.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "nerf.PingResponse")
	proto.RegisterType((*Request)(nil), "nerf.Request")
	proto.RegisterType((*Response)(nil), "nerf.Response")
	proto.RegisterType((*ApiResponse)(nil), "nerf.ApiResponse")
	proto.RegisterType((*Notify)(nil), "nerf.Notify")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Api service

type ApiClient interface {
	Connect(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ApiResponse, error)
	Disconnect(ctx context.Context, in *Notify, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type apiClient struct {
	cc *grpc.ClientConn
}

func NewApiClient(cc *grpc.ClientConn) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) Connect(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ApiResponse, error) {
	out := new(ApiResponse)
	err := grpc.Invoke(ctx, "/nerf.Api/Connect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Disconnect(ctx context.Context, in *Notify, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/nerf.Api/Disconnect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/nerf.Api/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Api service

type ApiServer interface {
	Connect(context.Context, *Request) (*ApiResponse, error)
	Disconnect(context.Context, *Notify) (*google_protobuf.Empty, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
}

func RegisterApiServer(s *grpc.Server, srv ApiServer) {
	s.RegisterService(&_Api_serviceDesc, srv)
}

func _Api_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nerf.Api/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Connect(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Notify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nerf.Api/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Disconnect(ctx, req.(*Notify))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nerf.Api/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Api_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nerf.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _Api_Connect_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _Api_Disconnect_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Api_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nerf.proto",
}

// Client API for Server service

type ServerClient interface {
	Connect(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Disconnect(ctx context.Context, in *Notify, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type serverClient struct {
	cc *grpc.ClientConn
}

func NewServerClient(cc *grpc.ClientConn) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) Connect(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/nerf.Server/Connect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Disconnect(ctx context.Context, in *Notify, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/nerf.Server/Disconnect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/nerf.Server/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Server service

type ServerServer interface {
	Connect(context.Context, *Request) (*Response, error)
	Disconnect(context.Context, *Notify) (*google_protobuf.Empty, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
}

func RegisterServerServer(s *grpc.Server, srv ServerServer) {
	s.RegisterService(&_Server_serviceDesc, srv)
}

func _Server_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nerf.Server/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Connect(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Notify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nerf.Server/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Disconnect(ctx, req.(*Notify))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nerf.Server/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Server_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nerf.Server",
	HandlerType: (*ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _Server_Connect_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _Server_Disconnect_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Server_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nerf.proto",
}

func init() { proto.RegisterFile("nerf.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 336 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x51, 0xcd, 0x4a, 0xf3, 0x40,
	0x14, 0x6d, 0x9a, 0x7c, 0x6d, 0xbf, 0xdb, 0x2a, 0x78, 0x91, 0x12, 0x22, 0x48, 0x99, 0x55, 0x11,
	0x4c, 0x41, 0x14, 0xd7, 0x45, 0x0b, 0x76, 0x23, 0xa5, 0x3e, 0x41, 0x8d, 0x37, 0x71, 0x30, 0x9d,
	0x89, 0xc9, 0x44, 0xec, 0xb3, 0xf8, 0xb2, 0x92, 0x99, 0x49, 0x8c, 0x52, 0xb7, 0xee, 0xe6, 0x1c,
	0xee, 0xf9, 0x49, 0x0e, 0x80, 0xa0, 0x3c, 0x0e, 0xb3, 0x5c, 0x2a, 0x89, 0x5e, 0xf5, 0x0e, 0x4e,
	0x12, 0x29, 0x93, 0x94, 0x66, 0x9a, 0x7b, 0x2c, 0xe3, 0x19, 0x6d, 0x33, 0xb5, 0x33, 0x27, 0xec,
	0x1a, 0x86, 0x2b, 0x2e, 0x92, 0x35, 0xbd, 0x96, 0x54, 0x28, 0x44, 0xf0, 0x9e, 0x36, 0x6a, 0xe3,
	0x3b, 0x93, 0xee, 0xd4, 0x5d, 0xeb, 0x37, 0x1e, 0xc3, 0xbf, 0x54, 0x26, 0x5c, 0xf8, 0xdd, 0x49,
	0x77, 0xfa, 0x7f, 0x6d, 0x00, 0x63, 0x30, 0x32, 0xc2, 0x22, 0x93, 0xa2, 0xa0, 0x7d, 0x4a, 0x76,
	0x05, 0xfd, 0xda, 0xb8, 0x31, 0x71, 0x5a, 0x26, 0x15, 0xab, 0xe4, 0x0b, 0x35, 0xd6, 0x1a, 0xb0,
	0x77, 0x18, 0x34, 0xb6, 0x63, 0xe8, 0x45, 0x52, 0xc4, 0x3c, 0xb1, 0x42, 0x8b, 0x30, 0x80, 0x41,
	0x94, 0x72, 0x12, 0x6a, 0xb9, 0xb2, 0xe2, 0x06, 0x6b, 0x57, 0xda, 0x6c, 0x0b, 0xdf, 0x9d, 0xb8,
	0xda, 0xb5, 0x02, 0xc8, 0x60, 0x94, 0xf2, 0xe4, 0x59, 0xdd, 0xc9, 0xb2, 0xa0, 0xe5, 0xca, 0xf7,
	0xb4, 0xea, 0x1b, 0xc7, 0x16, 0x30, 0x9c, 0x67, 0xbc, 0x09, 0x6f, 0x87, 0x38, 0x3f, 0x42, 0x02,
	0x18, 0xe4, 0xb4, 0x95, 0x8a, 0xbe, 0x0a, 0xd4, 0x98, 0x9d, 0x42, 0xef, 0x5e, 0x2a, 0x1e, 0xef,
	0xf6, 0x7f, 0xf6, 0xc5, 0x87, 0x03, 0xee, 0x3c, 0xe3, 0x78, 0x0e, 0xfd, 0x1b, 0x29, 0x04, 0x45,
	0x0a, 0x0f, 0x42, 0xbd, 0x9b, 0xfd, 0x5d, 0xc1, 0x91, 0x81, 0xad, 0x32, 0xac, 0x83, 0x97, 0x00,
	0xb7, 0xbc, 0x88, 0xac, 0x62, 0x64, 0x4e, 0x4c, 0x50, 0x30, 0x0e, 0xcd, 0xca, 0x61, 0xbd, 0x72,
	0xb8, 0xa8, 0x56, 0x66, 0x1d, 0x9c, 0x81, 0x57, 0x0d, 0x85, 0xd6, 0xb2, 0xb5, 0x76, 0x80, 0x6d,
	0xaa, 0x8e, 0xa9, 0xda, 0xf5, 0x1e, 0x28, 0x7f, 0xa3, 0x1c, 0xcf, 0x7e, 0x2d, 0x78, 0x58, 0xc3,
	0x3f, 0x6e, 0xf7, 0x19, 0x00, 0x00, 0xff, 0xff, 0x19, 0x36, 0x9a, 0x6b, 0xe0, 0x02, 0x00, 0x00,
}
